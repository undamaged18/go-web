package server

import (
	"github.com/gorilla/mux"
	"net/http"
)

// httpListener Listens for HTTP (:80 by default), port can be set to any port when not in production mode
// by altering the .server.yaml file
func httpListener(router *mux.Router, c chan error) {
	var handler http.Handler
	// If conf.CertManager has not been set (See server.Run) then just use the mux.router
	// If it has been set then use the autocert package to generate the TLS Certificate
	if conf.CertManager != nil {
		handler = conf.CertManager.HTTPHandler(router)
	} else {
		handler = router
	}
	if err := http.ListenAndServe(conf.Ports.HTTP, handler); err != nil {
		c <- err
	}
}

// httpsListener Listens for HTTPS (:443 by default), port can be set to any port when not in production mode
// by altering the .server.yaml file
func httpsListener(server *http.Server, c chan error) {
	var certFile, keyFile string

	// If conf.CertManager has not been set (See server.Run) then just use
	// the test certificates generated by openssl (guide here: https://letsencrypt.org/docs/certificates-for-localhost/)
	if conf.CertManager == nil {
		certFile = conf.TLS.Cert
		keyFile = conf.TLS.Key
	}
	// Listen for HTTPS requests, if an error occurs return it to the channel
	if err := server.ListenAndServeTLS(certFile, keyFile); err != nil {
		c <- err
	}
}